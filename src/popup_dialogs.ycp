/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/popup_dialogs.ycp
 * Package:	Configuration of squid
 * Summary:	Popup dialogs definitions
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id$
 */

{

textdomain "squid";
import "Label";
import "SquidACL";

include "squid/inits.ycp";
include "squid/store_del.ycp";

/*****************  HTTP PORT  ********************/
/**
 * returns true if something added/edited otherwise false
 */
boolean AddEditHttpPortDialog(integer id_item)
{
    any ui = nil;
    boolean ret = false;
    string label = (id_item == nil ? _("Add New HTTP Port")
                                      : _("Edit Current HTTP Port"));
    term contents =
        `VBox(
            `Label(label),
            `VSpacing(0.5),
            `TextEntry(`id("host"), _("Host"), ""),
            `TextEntry(`id("port"), _("Port"), ""),
            `Frame(_("Options"),
                    `CheckBox(`id("transparent"), "Transparent", false)
            ),
            `VSpacing(),
            `VStretch(),
            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        );

    UI::OpenDialog(`opt(`decorated), contents);
    UI::ChangeWidget(`id("port"), `ValidChars, "1234567890");

    InitAddEditHttpPortDialog(id_item);

    while (true){
        ui = UI::UserInput();

        if (ui == `abort || ui == `cancel){
            ret = false;
            break;
        }else if (ui == `ok){
            if (StoreDataFromAddEditHttpPortDialog(id_item)){
                ret = true;
                break;
            }
        }
    }

    UI::CloseDialog();
    return ret;
}
/*****************  HTTP PORT END  ****************/


/*****************  CACHE  ************************/
boolean AddEditRefreshPatternDialog(integer id_item)
{
    boolean ret = false;
    any ui = nil;
    string label = (id_item == nil ? _("Add New Refresh Pattern")
                                   : _("Edit Current refresh Pattern"));
    term contents =
        `VBox(
            `Label(label),
            `VSpacing(0.5),

            `VSquash(`HBox(
                `TextEntry(`id("regexp"), _("Regular Expression"), ""),
                `Bottom(`CheckBox(`id("regexp_case_insensitive"), _("Case Insensitive")))
            )),
            `IntField(`id("min"), _("Min (in minutes)"), 0, 99999, 0),
            `IntField(`id("percent"), _("Percent"), 0, 99999, 0),
            `IntField(`id("max"), _("Max (in minutes)"), 0, 99999, 0),

            `VSpacing(),
            `VStretch(),

            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        );

    UI::OpenDialog(`opt(`decorated), contents);

    InitAddEditRefreshPatternDialog(id_item);

    while (true){
        ui = UI::UserInput();

        if (ui == `cancel || ui == `abort){
            ret = false;
            break;
        }else if (ui == `ok){
            if (StoreDataFromAddEditRefreshPatternDialog(id_item)){
                ret = true;
                break;
            }
        }
    }

    UI::CloseDialog();
    return ret;
}


boolean CacheDirAdvancedSettingDialog(){
    boolean ret = false;
    any ui = nil;
    term contents =
        `VBox(
            `Label( _("Cache Directory Advanced Setting")),
            `VSpacing(0.5),

            //`ComboBox(`id("type"), _("Type"), []),
            `IntField(`id("mbytes"), _("Size (in MB)"), 1, 99999, 10),
            `IntField(`id("l1dirs"), _("Level 1 Directories"), 1, 99999, 20),
            `IntField(`id("l2dirs"), _("Level 2 Directories"), 1, 99999, 20),

            `VSpacing(),

            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        );

    UI::OpenDialog(contents);


    InitCacheDirAdvancedSettingDialog();

    while (true){
        ui = UI::UserInput();

        if (ui == `cancel || ui == `abort){
            ret = false;
            break;
        }else if (ui == `ok){
            if (StoreDataFromCacheDirAdvancedSettingDialog()){
                ret = true;
                break;
            }
        }
    }


    UI::CloseDialog();
    return ret;
}
/*****************  CACHE END  ********************/


/*****************  ACCESS CONTROL  ***************/
void addItemToAddEditHttpAccessDialog(boolean not, string item)
{
    list items = [];

    integer i = 0;
    foreach (term value, (list<term>)UI::QueryWidget(`id("acls"), `Items),
        {
            items = add(items, `item(`id(i), value[1]:"", value[2]:""));
            i = i+1;
        });
    items = add(items, `item(`id(i), (not == true ? "not" : ""), item));
    UI::ChangeWidget(`id("acls"), `Items, items);
}
integer delItemFromAddEditHttpAccessDialog(integer id_item)
{
    list items = [];

    integer i = 0;
    foreach (term value, (list<term>)UI::QueryWidget(`id("acls"), `Items),
        {
            if (value[0]:nil != `id(id_item)){
                items = add(items, `item(`id(i), value[1]:"", value[2]:""));
                i = i+1;
            }
        });
    UI::ChangeWidget(`id("acls"), `Items, items);
    if (id_item >= size(items)){
        id_item = id_item - 1;
    }
    return id_item;
}


boolean AddEditHttpAccessDialog(integer id_item)
{
    boolean ret = false;
    any ui = nil;
    string acl = "";
    boolean not = false;
    any tmp = nil;
    term tmp_term = nil;
    integer id_acl = 0;
    string label = (id_item == nil ? _("Add New HTTP Access")
                                   : _("Edit HTTP Access"));
    term contents =
        `VBox(
            `Label(label),
            `VSpacing(0.5),

            `ComboBox(`id("allow_deny"), _("Allow/Deny"),
                [`item(`id("allow"), "allow"), `item(`id("deny"), "deny")]),

            //`VSpacing(),

            `MinSize(25, 7,
                `Table(`id("acls"), `opt(`notify), `header("   ", _("ACL")), [])
            ),
            `Left(`HBox(
                `PushButton(`id(`del), Label::DeleteButton()),
                `PushButton(`id(`opposite), _("O&pposite"))
            )),

            `VSpacing(0.5),

            `MinWidth(25, `Frame( _("Add ACL"),
                `VSquash(`HBox(
                    `Bottom(`CheckBox(`id("acl_not"), _("not"))),
                    `MinWidth(15, `ComboBox(`id("acl"), "ACL", [])),
                    `Bottom(`PushButton(`id(`add), Label::AddButton()))
                ))
            )),

            `VStretch(),

            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        );

    UI::OpenDialog(contents);

    InitAddEditHttpAccessDialog(id_item);

    while (true){
        ui = UI::UserInput();

        if (ui == `cancel || ui == `abort){
            ret = false;
            break;
        }else if (ui == `ok){
            if (StoreDataFromAddEditHttpAccessDialog(id_item)){
                ret = true;
                break;
            }
        }else if (ui == `add){
            acl = (string)UI::QueryWidget(`id("acl"), `Value);
            not = (boolean)UI::QueryWidget(`id("acl_not"), `Value);
            if (size(acl) > 0){
                addItemToAddEditHttpAccessDialog(not, acl);
                InitAddEditHttpAccessDialog(nil);
            }
        }else if (ui == `del){
            id_acl = delItemFromAddEditHttpAccessDialog((integer)UI::QueryWidget(`id("acls"), `CurrentItem));
            InitAddEditHttpAccessDialog(nil);
            UI::ChangeWidget(`id("acls"), `CurrentItem, id_acl);
        }else if (ui == `opposite || ui == "acls"){
            id_acl = (integer)UI::QueryWidget(`id("acls"), `CurrentItem);
            tmp_term = (term)UI::QueryWidget(`id("acls"), `Item(id_acl));

            if (tmp_term[1]:"" == "not"){
                UI::ChangeWidget(`id("acls"), `Item(id_acl, 0), "");
            }else{
                UI::ChangeWidget(`id("acls"), `Item(id_acl, 0), "not");
            }
        }
    }


    UI::CloseDialog();

    return ret;
}


boolean AddEditACLDialog(integer id_item)
{
    boolean ret = false;
    any ui = nil;
    string orig_type = "";
    string type = "";
    string label = (id_item == nil ? _("Add New ACL Group")
                                   : _("Edit ACL Group"));
    term contents =
    `HBox(
        `HWeight(30, `RichText(`id("help_text"), "")),
        `HWeight(70, `VBox(
            `Label(label),
            `VSpacing(0.5),

            `TextEntry(`id("name"), _("Name"), ""),
            `Left(`ComboBox(`id("type"), `opt(`notify), _("Type"), SquidACL::GetTypesToComboBox())),
            `ReplacePoint(`id(`replace_point), `Empty()),

            `VStretch(),

            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        ))
    );

    UI::OpenDialog(contents);

    InitAddEditACLDialog(id_item);

    orig_type = (string)UI::QueryWidget(`id("type"), `Value);
    SquidACL::Replace(`replace_point, orig_type);
    SquidACL::InitWidget(orig_type, id_item, "help_text");

    while (true){
        ui = UI::UserInput();

        if (ui == `cancel || ui == `abort){
            ret = false;
            break;
        }else if (ui == `ok){
            if (StoreDataFromAddEditACLDialog(id_item)){
                ret = true;
                break;
            }
        }else if (ui == "type"){
            type = (string)UI::QueryWidget(`id("type"), `Value);
            SquidACL::Replace(`replace_point, type);
            if (type == orig_type){
                SquidACL::InitWidget(type, id_item, "help_text");
            }else{
                SquidACL::InitWidget(type, nil, "help_text");
            }
        }
    }


    UI::CloseDialog();

    return ret;
}
/*****************  ACCESS CONTROL END  ***********/



}
/* vim: set sw=4 ts=4 et ft=ycp : */

/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/helper_functions.ycp
 * Package:	Configuration of squid
 * Summary:	Helper functions for various situations.
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */
{
textdomain "squid";

import "FileUtils";


/**
 * Returns a widget with setting of units
 */
term sizeUnitWidget(string id)
{
    return `ComboBox(`id(id), " ",
                [`item("KB"), `item("MB")]);
}

/**
 * Returns multiple which equals to given parameter.
 */
integer unitToMultiple(string unit)
{
    if (unit == "KB") return 1024;
    if (unit == "MB") return 1024*1024;
}


/**
 * Returns a widget with setting of units
 */
term timeUnitWidget(string id)
{
    return `ComboBox(`id(id), " ",
                [`item("seconds"), `item("minutes"), `item("hours"), `item("days")]);
}


boolean isCorrectPathnameOfLogFile(string str)
{
    boolean ok = regexpmatch(str, "^/([^/]+/)*[^/]+$");
    if (ok){
        list<string> dir = regexptokenize(str, "^(.+)/[^/]+$");
        if (!FileUtils::IsDirectory(dir[0]:"/"))
            ok = false;
    }
    return ok;
}

boolean isIPAddr(string str)
{
    boolean ok = true;
    list<string> l = regexptokenize(str, "^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)$");

    if (size(l) != 4){
        ok = false;
    }else{
        integer i = 0;
        foreach (string value, l,
            {
                i = tointeger(value);
                if (i < 0 || i > 255){
                    ok = false;
                    break;
                }
            });
    }

    return ok;
}

boolean isHostName(string str)
{
    //max 22 chars length
    //see http://www.no-ip.com/support/faq/EN/dynamic_ddns/what_is_a_valid_hostname.html
    return regexpmatch(str, "^[a-zA-Z0-9][a-zA-Z0-9-]{0,21}$");
}

boolean isCorrectHost(string host)
{
    if (!isIPAddr(host) && !isHostName(host))
        return false;
    return true;
}


}

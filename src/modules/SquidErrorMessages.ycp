/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/SquidErrorMessages.ycp
 * Package:	Configuration of squid
 * Summary: Handle list of paths to direcotories with error messages
 *          in different languages.
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id$
 *
 */

{

module "SquidErrorMessages";
textdomain "squid";

import "FileUtils";


/**
 * format:
 *      $[ "language" : "path_to_directory",
 *         ....
 *       ]
 */
map<string, string> err = $[];

/**
 * Directory where is located directories with messages in various languages.
 */
string err_msg_dir = "/usr/share/squid/errors";


void read()
{
    //if err uninitialized else do nothing
    if (size(err) == 0){
        err = $[];
        string dir = "";
        foreach (string value, (list<string>)SCR::Read(.target.dir, err_msg_dir),
            {
                if (FileUtils::IsDirectory(err_msg_dir + "/" + value)){
                    dir = mergestring(splitstring(value, "_"), " ");
                    if (size(dir) > 0){
                        err[dir] = err_msg_dir + "/" + value;
                    }
                }
            });

        y2debug("SquidErrorMessages::read() - err: %1", err);
    }
}

/**
 * Returns list of all available languages
 */
global list<string> GetLanguages()
{
    read();

    list<string> ret = [];
    foreach (string key, any value, err,
        {
            ret = add(ret, key);
        });
    return ret;
}

map<string,string> trans_map = $[
    // language name - combo box entry
    "Armenian" : _("Armenian"),
    // language name - combo box entry
    "Catalan" : _("Catalan"),
    // language name - combo box entry
    "Dutch" : _("Dutch"),
    // language name - combo box entry
    "Finnish" : _("Finnish"),
    // language name - combo box entry
    "Greek" : _("Greek"),
    // language name - combo box entry
    "Italian" : _("Italian"),
    // language name - combo box entry
    "Lithuanian" : _("Lithuanian"),
    // language name - combo box entry
    "Romanian" : _("Romanian"),
    // language name - combo box entry
    "Serbian" : _("Serbian"),
    // language name - combo box entry
    "Spanish" : _("Spanish"),
    // language name - combo box entry
    "Turkish" : _("Turkish"),
    // language name - combo box entry; don't translate the encoding suffix
    "Ukrainian-1251" : _("Ukrainian-1251"),
    // language name - combo box entry
    "Azerbaijani" : _("Azerbaijani"),
    // language name - combo box entry
    "Czech" : _("Czech"),
    // language name - combo box entry
    "English" : _("English"),
    // language name - combo box entry
    "French" : _("French"),
    // language name - combo box entry
    "Hebrew" : _("Hebrew"),
    // language name - combo box entry
    "Japanese" : _("Japanese"),
    // language name - combo box entry
    "Polish" : _("Polish"),
    // language name - combo box entry; don't translate the encoding suffix
    "Russian-koi8-r" : _("Russian-koi8-r"),
    // language name - combo box entry
    "Simplify Chinese" : _("Simplified Chinese"),
    // language name - combo box entry
    "Swedish" : _("Swedish"),
    // language name - combo box entry; don't translate the encoding suffix
    "Ukrainian-koi8-u" : _("Ukrainian-koi8-u"),
    // language name - combo box entry
    "Bulgarian" : _("Bulgarian"),
    // language name - combo box entry
    "Danish" : _("Danish"),
    // language name - combo box entry
    "Estonian" : _("Estonian"),
    // language name - combo box entry
    "German" : _("German"),
    // language name - combo box entry
    "Hungarian" : _("Hungarian"),
    // language name - combo box entry
    "Korean" : _("Korean"),
    // language name - combo box entry
    "Portuguese" : _("Portuguese"),
    // language name - combo box entry; don't translate the encoding suffix
    "Russian-1251" : _("Russian-1251"),
    // language name - combo box entry
    "Slovak" : _("Slovak"),
    // language name - combo box entry
    "Traditional Chinese" : _("Traditional Chinese"),
    // language name - combo box entry; don't translate the encoding suffix
    "Ukrainian-utf8" : _("Ukrainian-utf8"),
];

/**
 * Returns list of all available languages in form of items of ComboBox.
 */
global list<term> GetLanguagesToComboBox()
{
    read();

    list<term> ret = [];
    foreach (string language, GetLanguages(),
        {
            ret = add(ret, `item(`id(language), trans_map[language]:language));
        });
    return ret;
}


/**
 * Returns path to directory containing error messages in given language.
 */
global string GetPath(string language)
{
    read();

    return err[language]:"";
}

/**
 * Inverse function to GetPath.
 * Returns languge which has path pth to directory containing error messages.
 */
global string GetLanguageFromPath(string pth)
{
    read();

    string ret = nil;
    foreach (string key, string value, err,
        {
            if (value == pth){
                ret = key;
                break;
            }
        });

    return ret;
}

}
/* vim: set sw=4 ts=4 et ft=ycp : */

/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/complex.ycp
 * Package:	Configuration of squid
 * Summary:	Dialogs definitions
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z mzugec $
 */

{

textdomain "squid";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "Squid";


include "squid/helps.ycp";


/**
 * Returns a widget with setting of units
 */
term unitWidget(string id)
{
    return `ComboBox(`id(id), " ",
                [`item("KB"), `item("MB")]);
}


/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Squid::Modified();
}

boolean ReallyAbort() {
    return !Squid::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // Squid::AbortFunction = PollAbort;
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = Squid::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // Squid::AbortFunction = PollAbort;
    boolean ret = Squid::Write();
    return ret ? `next : `abort;
}

any BaseDialog(){
    any ret = nil;
    term dialog_contents =
        `VBox(
            `Left(`Label( _("HTTP Ports"))),
            `Table(`header("Host","Port","Options")),
            `HBox(
                `PushButton(`id(`add), _("Add")),
                `PushButton(`id(`del), _("Del")),
                `PushButton(`id(`modify), _("Modify")),
                `HStretch()
            ),
            `HBox(
                `Label( _("Language of error messages:")),
                `ComboBox(`id("error_language"),
                              "",
                              [ `item("aaa"),`item("bbb",true)]),
                `HStretch()
            )
        );

    Wizard::SetContentsButtons("Squid Configuration", dialog_contents, "help text ad",
        Label::BackButton(), Label::NextButton());

    while (true){
        ret = UI::UserInput();

        y2debug("BaseDialog(): ret == %1",ret);

        if (ret == `next) break;
        else if (ret == `abort || ret == `back || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }
    }

    return ret;
}


any CacheDialog(){
    any ret = nil;
    term dialog_contents =
        `VBox(
            `Left(`Label( _("Refresh Patterns"))),
            `Table(`id("refresh_patterns"), `header("Regular Expression", "Min", "Precent", "Max", "Options")),
            `HBox(
                `PushButton(`id(`add), _("Add")),
                `PushButton(`id(`del), _("Del")),
                `PushButton(`id(`modify), _("Modify")),
                `HStretch()
            ),
            `Left(`Frame("Cache Setting",
                `VBox(
                    `HBox(
                        `HSquash(`TextEntry(`id("cache_mem"), `opt(`shrinkable), "Cache Memory", "")),
                        unitWidget("cache_mem_units"),
                        `HStretch()
                    ),
                    `HBox(
                        `HSquash(`TextEntry(`id("cache_max_object_size"), `opt(`shrinkable), "Max Object Size", "")),
                        unitWidget("cache_max_object_size_units"),
                        `HSpacing(),
                        `HSquash(`TextEntry(`id("cache_min_object_size"), `opt(`shrinkable),"Min Object Size", "")),
                        unitWidget("cache_min_object_size_units"),
                        `HStretch()
                    ),
                    `VSquash(`HBox(
                        `HSquash(`IntField(`id("cache_swap_low"), "Swap Low-Water Mark", 1, 100, 10)),
                        `Bottom(`Label("%")),
                        `HSpacing(),
                        `HSquash(`IntField(`id("cache_swap_high"), "Swap High-Water Mark", 1, 100, 10)),
                        `Bottom(`Label("%")),
                        `HStretch()
                    )),
                    `Left(`HBox(
                        `ComboBox(`id("cache_replacement_policy"),
                                  "Cache Replacement Policy",
                                  [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")]),
                        `ComboBox(`id("memory_replacement_policy"),
                                  "Memory Replacement Policy",
                                  [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")])
                    )),
                    `VSquash(`HBox(
                        `TextEntry(`id("cache_dir"), "Cache Directory", ""),
                        `Bottom(`PushButton(`id(`cache_dir), "Advanced Setting"))
                    ))
                )
            ))
        );

    Wizard::SetContentsButtons("Squid - Cache Setting", dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    UI::ChangeWidget(`id("cache_mem"), `ValidChars, "0123456789");
    UI::ChangeWidget(`id("cache_max_object_size"), `ValidChars, "0123456789");
    UI::ChangeWidget(`id("cache_min_object_size"), `ValidChars, "0123456789");
    UI::ChangeWidget(`id("cache_mem_units"), `Items, [`item("B"),`item("KB",true), `item("MB")]);

    while (true){
        ret = UI::UserInput();

        y2debug("BaseDialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }
    }

    return ret;
}


any AccessControlDialog(){
    any ret = nil;
    term dialog_contents =
        `VBox(
            `Left(`Label("ACL Groups")),
            `Table(`id("acl"), `header("Name", "Type", "Description")),
            `HBox(
                `PushButton(`id(`add_acl), "Add"),
                `PushButton(`id(`del_acl), "Del"),
                `PushButton(`id(`modify_acl), "Modify"),
                `HStretch()
            ),

            `VSpacing(),

            `Left(`Label("Access Control")),
            `HBox(
                `Table(`id("http_access"), `header("Allow/Deny", "ACL Groups")),
                `HSquash(`VBox(
                    `HWeight(1, `PushButton(`id(`up_http_access), "Up")),
                    `HWeight(1, `PushButton(`id(`down_http_access), "Down"))
                ))
            ),
            `HBox(
                `PushButton(`id(`add_http_access), "Add"),
                `PushButton(`id(`del_http_access), "Del"),
                `PushButton(`id(`modify_http_access), "Modify"),
                `HStretch()
            )
        );

    Wizard::SetContentsButtons("caption", dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    while (true){
        ret = UI::UserInput();

        y2debug("BaseDialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }
    }

    return ret;
}



any MiscellaneousDialog()
{
    any ret = nil;
    term dialog_contents =
        `Top(`VBox(

            `Left(`Frame("Miscellaneous",
                `VBox(
                    `Left(`HSquash(`TextEntry(`id("cache_mgr"), "Administrator's e-mail", ""))),
                    `Left(`CheckBox(`id("ftp_pasive_mode"), "Use Ftp Pasive Mode"))
                )
            )),

            `VSpacing(),

            `Left(`Frame("Logging",
                `VBox(
                    `HSquash(`TextEntry(`id("access_log"), "Access Log" , "")),
                    `HSquash(`TextEntry(`id("cache_log"), "Cache Log", "")),
                    `HSquash(`TextEntry(`id("cache_store_log"), "Cache Store Log", "")),
                    `HSquash(`TextEntry(`id("cache_swap_log"), "Cache Swap Log", "")),
                    `Left(`CheckBox(`id("emulate_httpd_log"), "Emulate Httpd Log?"))
                )
            )),

            `VSpacing(),

            `Left(`Frame("Timeouts",
                `VBox(
                    `HBox(
                       `HSquash(`TextEntry(`id("connect_timeout"), "Connection timeout", "")),
                       `ComboBox(`id("connect_timeout_units"), " ", [`item("seconds"), `item("minutes")])
                    ),
                    `HBox(
                       `HSquash(`TextEntry(`id("client_lifetime"), "Client Lifetime", "")),
                       `ComboBox(`id("client_lifetime_units"), " ", [`item("seconds"), `item("minutes")])
                    )
                )
            ))
        ));

    Wizard::SetContentsButtons("Squid - Miscellaneous Setting", dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    while (true){
        ret = UI::UserInput();

        y2debug("BaseDialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }
    }

    return ret;
}

}
/* vim: set sw=4 ts=4 et ft=ycp : */

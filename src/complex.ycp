/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/complex.ycp
 * Package:	Configuration of squid
 * Summary:	Dialogs definitions
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z mzugec $
 */

{

textdomain "squid";

import "Wizard";
import "Confirm";
import "DialogTree";
import "CWMServiceStart";
import "CWMFirewallInterfaces";
import "PackageSystem";
import "Squid";
import "Mode";

include "squid/helps.ycp";
include "squid/dialogs.ycp";
include "squid/handlers.ycp";
include "squid/store_del.ycp";
include "squid/inits.ycp";




boolean ReallyAbort() {
    return !Squid::GetModified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    Squid::AbortFunction = PollAbort;
    if (!Confirm::MustBeRoot()) return `abort;
    if (!PackageSystem::CheckAndInstallPackagesInteractive(["squid"])) return `abort;
    boolean ret = Squid::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    Squid::AbortFunction = PollAbort;
    boolean ret = Squid::Write();
    return ret ? `next : `abort;
}


void SaveAndRestart()
{
    Wizard::CreateDialog();
    WriteDialog();
    UI::CloseDialog();
}


string main_caption = _("Squid");

map<string, map<string, any> > widget_descr = $[
        "auto_start" : CWMServiceStart::CreateAutoStartWidget($[
                            "get_service_auto_start" : Squid::IsServiceEnabled,
                            "set_service_auto_start" : Squid::SetServiceEnabled,
                            "start_auto_button" : _("When &Booting"),
                            "start_manual_button" : _("&Manually"),
                            "help" : sformat(CWMServiceStart::AutoStartHelpTemplate(),
                                        _("When Booting"),
                                        _("Manually")
                                )
                       ]),
        "start_stop" : CWMServiceStart::CreateStartStopWidget($[
                            "service_id"                : "squid",
                            "service_running_label"     : _("Squid is running"),
                            "service_not_running_label" : _("Squid is not running"),
                            "start_now_button"          : _("&Start Squid Now"),
                            "stop_now_button"           : _("S&top Squid Now"),
                            "save_now_action"           : SaveAndRestart,
                            "save_now_button"           : _("Sa&ve Settings and Restart Squid Now"),
                            //"start_now_action"          : uses the default function
                            //"stop_now_action"           : uses the default function
                            "help"                      : sformat (CWMServiceStart::StartStopHelpTemplate (true),
                                            // TRANSLATORS: part of help text - push button label, NO SHORTCUT!!!
                                            _("Start Squid Now"),
                                            // TRANSLATORS: part of help text - push button label, NO SHORTCUT!!!
                                            _("Stop Squid Now"),
                                            // TRANSLATORS: part of help text - push button label, NO SHORTCUT!!!
                                            _("Save Settings and Restart Squid Now")
                                )
                       ]),
        "firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget($[
                        "services" : [Squid::GetFirewallServiceName()],
                        "display_details" : true,
                        "open_firewall_checkbox" : _("Open Ports in Firewall")
                     ]),


        "http_ports_table" : $[
            "widget" : `custom,
            "custom_widget" : HttpPortsTableWidget(),
            "init" : InitHttpPortsTable,
            "handle" : HandleHttpPortsTable,
            "help" : HELPS["http_ports"]:""
        ],

        "refresh_patterns_table" : $[
            "widget" : `custom,
            "custom_widget" : RefreshPatternsTableWidget(),
            "init" : InitRefreshPatternsTable,
            "handle" : HandleRefreshPatternsTable,
            "help" : HELPS["cache"]:""
        ],

        "cache2_dialog" : $[
            "widget" : `custom,
            "custom_widget" : Cache2DialogWidget(),
            "init" : InitCache2Dialog,
            "handle" : HandleCache2Dialog,
            "store" : StoreDataFromCache2Dialog,
            "validate_type" : `function,
            "validate_function" : ValidateCache2Dialog,
            "help" : HELPS["cache2"]:""
        ],

        "cache_directory" : $[
            "widget" : `custom,
            "custom_widget" : CacheDirectoryDialog(),
            "init" : InitCacheDirectoryDialog,
            "handle" : HandleCacheDirectoryDialog,
            "store" : StoreDataFromCacheDirectoryDialog,
            "validate_type" : `function,
            "validate_function" : ValidateCacheDirectoryDialog,
            "help" : HELPS["cache_directory"]:""
        ],

        "acl_groups_table" : $[
            "widget" : `custom,
            "custom_widget" : ACLGroupsTableWidget(),
            "init" : InitACLGroupsTable,
            "handle" : HandleAccessControlDialog,
            "help" : HELPS["acl_groups"]:""
        ],
        "http_access_table" : $[
            "widget" : `custom,
            "custom_widget" : HttpAccessTableWidget(),
            "init" : InitHttpAccessTable,
            "help" : HELPS["http_access"]:""
        ],

        "logging_frame" : $[
            "widget" : `custom,
            "custom_widget" : LoggingFrameWidget(),
            "init" : InitLoggingFrame,
            "handle" : HandleLoggingFrame,
            "store" : StoreDataFromLoggingFrame,
            "validate_type" : `function,
            "validate_function" : ValidateLoggingFrame,
            "help" : HELPS["logging"]:""
        ],
        "timeouts_frame" : $[
            "widget" : `custom,
            "custom_widget" : TimeoutsFrameWidget(),
            "init" : InitTimeoutsFrame,
            "help" : HELPS["timeouts"]:""
        ],

        "miscellaneous_frame" : $[
            "widget" : `custom,
            "custom_widget" : MiscellaneousFrameWidget(),
            "init" : InitMiscellaneousFrame,
            "store" : StoreDataFromMiscellaneousFrame,
            "validate_type" : `function,
            "validate_function" : ValidateMiscellaneousFrame,
            "help" : HELPS["miscellaneous"]:""
        ]
    ];

map<string, map<string, any> > screens = $[
        "s1" : $[
            "widget_names" : ["auto_start", "start_stop", "firewall"],
            "contents" : `VCenter(`HBox(
                            `HSpacing(3),
                            `VBox(
                                "auto_start",
                                `VSpacing(),
                                (Mode::normal() ? "start_stop" : `Empty()),
                                `VSpacing(),
                                `Frame(_("Firewall Settings"), "firewall")
                            ),
                            `HSpacing(3)
                         )),
            "caption" : main_caption + ": " + _("Start-Up"),
            "tree_item_label" : _("Start-Up")
        ],

        "s2" : $[
            "widget_names" : ["http_ports_table"],
            "contents" : `VBox("http_ports_table"),
            "caption" : main_caption + ": " + _("HTTP Ports Setting"),
            "tree_item_label" : _("HTTP Ports")
        ],

        "s3" : $[
            "widget_names" : ["refresh_patterns_table"],
            "contents" : `VBox("refresh_patterns_table"),
            "caption" : main_caption + ": " + _("Refresh Patterns Setting"),
            "tree_item_label" : _("Refresh Patterns")
        ],

        "s4" : $[
            "widget_names" : ["cache2_dialog"],
            "contents" : `VCenter("cache2_dialog"),
            "caption" : main_caption + ": " + _("Cache Setting"),
            "tree_item_label" : _("Cache Setting")
        ],

        "s5" : $[
            "widget_names" : ["cache_directory"],
            "contents" : `VCenter("cache_directory"),
            "caption" : main_caption + ": " + _("Cache Directory Setting"),
            "tree_item_label" : _("Cache Directory")
        ],

        "s6" : $[
            "widget_names" : ["acl_groups_table", "http_access_table"],
            "contents" : `VBox(
                            "acl_groups_table",
                            `VSpacing(),
                            "http_access_table"
                         ),
            "caption" : main_caption + ": " + _("Access Control Setting"),
            "tree_item_label" : _("Access Control")
        ],

        "s7" : $[
            "widget_names" : ["logging_frame", "timeouts_frame"],
            "contents" : `HBox(`HSpacing(3),
                            `VBox(
                                "logging_frame",
                                `VSpacing(),
                                "timeouts_frame"
                            ),
                         `HSpacing(3)),
            "caption" : main_caption + ": " + _("Logging and Timeouts Setting"),
            "tree_item_label" : _("Logging and Timeouts")
        ],

        "s8" : $[
            "widget_names" : ["miscellaneous_frame"],
            "contents" : `VBox("miscellaneous_frame"),
            "caption" : main_caption + ": " + _("Miscellaneous Setting"),
            "tree_item_label" : _("Miscellaneous")
        ]
    ];

list<string> ids_order = ["s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8"];
string initial_screen = "s1";

any MainDialog()
{
    return DialogTree::ShowAndRun($[
               "ids_order" : ids_order,
               "initial_screen" : initial_screen,
               "widget_descr" : widget_descr,
               "screens" : screens,
               "functions" : $[`abort : ReallyAbort],
               "back_button" : "",
               "next_button" : Label::AcceptButton(),
               "abort_button" : Label::AbortButton()
           ]);
}

}
/* vim: set sw=4 ts=4 et ft=ycp : */

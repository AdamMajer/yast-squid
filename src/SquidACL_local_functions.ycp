/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/SquidACL_local_functions.ycp
 * Package:	Configuration of squid
 * Summary:	Non-global functions of SquidACL module which are linked with acl_map variable.
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id$
 */
{

textdomain "squid";
import "Report";

import "Squid";

include "squid/helper_functions.ycp";

list<string> splitToChars(string str)
{
    integer len = size(str);
    integer i = 0;
    list<string> ret = [];
    while (i<len){
        ret = add(ret, substring(str,i,1));
        i = i + 1;
    }

    return (ret);
}

boolean isMask(string str)
{
    return regexpmatch(str, "^[0-9]+$") || isIPAddr(str);
}
boolean isHHMMFormat(string str)
{
    if (!regexpmatch(str, "^[0-9]{1,2}:[0-9]{1,2}$")) return false;
    list<string> hm = splitstring(str, ":");
    integer tmp = 0;

    tmp = tointeger(hm[0]:"");
    if (tmp < 0 || tmp > 23) return false;
    tmp = tointeger(hm[1]:"");
    if (tmp < 0 || tmp > 59) return false;

    return true;
}
boolean isCorrectFromTo(string from, string to)
{
    integer fr = tointeger(regexpsub(mergestring(splitstring(from, ":"), ""), "([1-9][0-9]*$)", "\\1"));
    integer t = tointeger(regexpsub(mergestring(splitstring(to, ":"),""), "([1-9][0-9]*$)", "\\1"));

    return fr<t;
}



void widgetInitIPAddr(any id)
{
    UI::ChangeWidget(`id(id), `ValidChars, "1234567890.");
}
void widgetInitMask(any id)
{
    UI::ChangeWidget(`id(id), `ValidChars, "1234567890.");
}
void widgetInitDomainName(any id)
{
    UI::ChangeWidget(`id(id), `ValidChars, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.");
}
void widgetInitHHMM(any id)
{
    UI::ChangeWidget(`id(id), `ValidChars, "1234567890:");
    UI::ChangeWidget(`id(id), `InputMaxLength, 5);
}


/******************  SRC  *************************/
void srcWidgetInit(integer id_item)
{
    UI::ChangeWidget(`id("acl_addr"), `ValidChars, "1234567890.-");
    widgetInitMask("acl_mask");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);
        list<string> data = splitstring((acl["options"]:[])[0]:"", "/");

        UI::ChangeWidget(`id("acl_addr"), `Value, data[0]:"");
        UI::ChangeWidget(`id("acl_mask"), `Value, data[1]:"");
    }
}

boolean srcVerif(){
    boolean ok = true;
    string addr = (string)UI::QueryWidget(`id("acl_addr"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);
    list<string> tmp = splitstring(addr, "-");

    if (size(addr) == 0 ||
        (!isIPAddr(addr) && !isIPAddr(tmp[0]:"") && !isIPAddr(tmp[1]:"")) ||
        (size(mask) > 0 && !isMask(mask))){
        ok = false;
        Report::Error( _("Invalid values."));
    }
    return ok;
}

list<string> srcOptions(){
    list<string> data = [];
    string addr = (string)UI::QueryWidget(`id("acl_addr"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);

    data[0]=addr;
    if (size(mask) > 0 && size(addr) > 0)
        data[0] = data[0]:"" + "/" + mask;
    return data;
}
/******************  SRC END  *********************/


/******************  DST  *************************/
void dstWidgetInit(integer id_item)
{
    widgetInitIPAddr("acl_addr");
    widgetInitMask("acl_mask");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);
        list<string> data = splitstring((acl["options"]:[])[0]:"", "/");

        UI::ChangeWidget(`id("acl_addr"), `Value, data[0]:"");
        UI::ChangeWidget(`id("acl_mask"), `Value, data[1]:"");
    }
}

boolean dstVerif()
{
    boolean ok = true;
    string addr = (string)UI::QueryWidget(`id("acl_addr"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);

    if (!isIPAddr(addr) || (size(mask) > 0 && !isMask(mask))){
        ok = false;
        Report::Error( _("Invalid values."));
    }
    return ok;
}

list<string> dstOptions()
{
    list<string> data = [];
    string addr = (string)UI::QueryWidget(`id("acl_addr"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);

    data[0] = addr;
    if (size(mask) > 0 && size(addr) > 0)
        data[0] = data[0]:"" + "/" + mask;
    return data;
}
/******************  DST END  *********************/


/******************  MYIP  ************************
 * Uses same functions as DST
/******************  MYIP END  ********************/


/****************  SRCDOMAIN  *********************/
void srcdomainWidgetInit(integer id_item)
{
    widgetInitDomainName("acl_domain");

    if (id_item != nil){
        map<string, any> acl = Squid::GetACL(id_item);
        UI::ChangeWidget(`id("acl_domain"), `Value, (acl["options"]:[])[0]:"");
    }
}
boolean srcdomainVerif()
{
    boolean ok = true;

    if (size((string)UI::QueryWidget(`id("acl_domain"), `Value)) == 0){
        ok = false;
        Report::Error( _("Domain Name must not be empty."));
    }
    return ok;
}
list<string> srcdomainOptions()
{
    return [(string)UI::QueryWidget(`id("acl_domain"), `Value)];
}
/****************  SRCDOMAIN END  *****************/

/****************  DSTDOMAIN  *********************
 * Uses same functions as SRCDOMAIN.
/****************  DSTDOMAIN END  *****************/


/****************  REGEXP  ************************/
/**
 * Returns universal widget for setting a regular expression.
 */
term regexpWidget(string frame_title)
{
    return `Frame( frame_title,
                `VBox(
                    `TextEntry(`id("acl_regexp"), _("Regular Expression"), ""),
                    `Left(`CheckBox(`id("acl_regexp_case_insensitive"), _("Case Insensitive"), false))
                )
            );
}

/**
 * Universal widget_init for regular expression.
 */
void regexpWidgetInit(integer id_item)
{
    if (id_item != nil){
        map <string,any> acl = Squid::GetACL(id_item);

        if ((acl["options"]:[])[0]:"" == "-i"){
            UI::ChangeWidget(`id("acl_regexp_case_insensitive"), `Value, true);
            acl["options"] = remove(acl["options"]:[],0);
        }
        UI::ChangeWidget(`id("acl_regexp"), `Value, (acl["options"]:[])[0]:"");
    }
}
/**
 * Universal verification function for regular expression.
 */
boolean regexpVerif()
{
    boolean ok = true;
    string regexp = (string)UI::QueryWidget(`id("acl_regexp"), `Value);

    if (size(regexp) == 0){
        ok = false;
        Report::Error( _("Regular Expression must not be empty."));
    }
    return ok;
}
/**
 * Universal options function for regular expression.
 */
list<string> regexpOptions()
{
    list<string> ret = [];
    if ((boolean)UI::QueryWidget(`id("acl_regexp_case_insensitive"), `Value))
        ret[0] = "-i";
    ret = add(ret, (string)UI::QueryWidget(`id("acl_regexp"), `Value));
    return ret;
}

/**
 * Returns map describing acl which has type of regular expression.
 */
map<string,any> regexp(string name, string frame_title, string help)
{
    return $[ "name" : name,
              "widget" : regexpWidget(frame_title),
              "widget_init" : regexpWidgetInit,
              "verification" : regexpVerif,
              "options" : regexpOptions,
              "help" : help ];
}
/****************  REGEXP END  ********************/



/****************  TIME  **************************/
void timeWidgetInit(integer id_item)
{
    widgetInitHHMM("acl_from");
    widgetInitHHMM("acl_to");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);
        list<string> days = splitToChars((acl["options"]:[])[0]:"");
        list<string> times = splitstring((acl["options"]:[])[1]:"","-");

        UI::ChangeWidget(`id("acl_days"), `SelectedItems, days);
        UI::ChangeWidget(`id("acl_from"), `Value, times[0]:"");
        UI::ChangeWidget(`id("acl_to"), `Value, times[1]:"");
    }
}
boolean timeVerif()
{
    boolean ok = true;
    string from = (string)UI::QueryWidget(`id("acl_from"), `Value);
    string to = (string)UI::QueryWidget(`id("acl_to"), `Value);
    integer selected_items = size((list)UI::QueryWidget(`id("acl_days"), `SelectedItems));

    if (selected_items == 0){
        ok = false;
        Report::Error( _("You must select at least on day."));
    }else if (!isHHMMFormat(from) || !isHHMMFormat(to)){
        ok = false;
        Report::Error( _("Time isn't filled in corrent format."));
    }else if (!isCorrectFromTo(from, to)){// from must be less then to
        ok = false;
        Report::Error( _("From must be less then To."));//TODO: better error message
    }
    return ok;
}
list<string> timeOptions()
{
    string days = mergestring((list<string>)UI::QueryWidget(`id("acl_days"), `SelectedItems),"");
    string times = mergestring([(string)UI::QueryWidget(`id("acl_from"), `Value),
                                (string)UI::QueryWidget(`id("acl_to"), `Value)], "-");
    return [days, times];
}
/****************  TIME END  **********************/


/****************  PORT  **************************/
void portWidgetInit(integer id_item)
{
    UI::ChangeWidget(`id("acl_port"), `ValidChars, "1234567890-");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);

        UI::ChangeWidget(`id("acl_port"), `Value, (acl["options"]:[])[0]:"");
    }
}
boolean portVerif()
{
    boolean ok = true;
    string port = (string)UI::QueryWidget(`id("acl_port"), `Value);

    if (!regexpmatch(port, "^[0-9]+(-[0-9]+){0,1}$")){
        ok = false;
    }else{
        list<string> ports = splitstring(port, "-");
        if (size(ports) == 2 && (tointeger(ports[0]:"") > tointeger(ports[1]:""))){
            ok = false;
        }
    }
    if (!ok){
        Report::Error( _("Invalid value."));
    }
    return ok;
}
list<string> portOptions()
{
    return [(string)UI::QueryWidget(`id("acl_port"), `Value)];
}
/****************  PORT END  **********************/


/**************  MYPORT  **************************/
void myportWidgetInit(integer id_item)
{
    UI::ChangeWidget(`id("acl_port"), `ValidChars, "1234567890");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);

        UI::ChangeWidget(`id("acl_port"), `Value, (acl["options"]:[])[0]:"");
    }
}
boolean myportVerif()
{
    boolean ok = true;
    string port = (string)UI::QueryWidget(`id("acl_port"), `Value);

    if (!regexpmatch(port, "^[0-9]+$")){
        ok = false;
        Report::Error( _("Invalid value."));
    }
    return ok;
}
/**************  MYPORT END  **********************/


/***************  PROTO  **************************/
void protoWidgetInit(integer id_item)
{
    UI::ChangeWidget(`id("acl_proto"), `ValidChars, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);

        UI::ChangeWidget(`id("acl_proto"), `Value, (acl["options"]:[])[0]:"");
    }
}
boolean protoVerif()
{
    boolean ok = true;
    string protocol = (string)UI::QueryWidget(`id("acl_proto"), `Value);

    if (size(protocol) == 0){
        Report::Error( _("Protocol must not be empty."));
    }
    return ok;
}
list<string> protoOptions()
{
    return [(string)UI::QueryWidget(`id("acl_proto"), `Value)];
}
/***************  PROTO END  **********************/


/***************  METHOD  *************************/
void methodWidgetInit(integer id_item)
{
    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);

        UI::ChangeWidget(`id("acl_method"), `Value, (acl["options"]:[])[0]:"");
    }
}
boolean methodVerif()
{
    return true;
}
list<string> methodOptions()
{
    return [(string)UI::QueryWidget(`id("acl_method"), `Value)];
}
/***************  METHOD END  *********************/


/***************  MAXCONN  ************************/
void maxconnWidgetInit(integer id_item)
{
    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);

        UI::ChangeWidget(`id("acl_connections"), `Value, tointeger((acl["options"]:[])[0]:""));
    }
}
boolean maxconnVerif()
{
    return true;
}
list<string> maxconnOptions()
{
    return [tostring(UI::QueryWidget(`id("acl_connections"), `Value))];
}
/***************  MAXCONN END  ********************/


/***************  HEADER  *************************/
void headerWidgetInit(integer id_item)
{
    if (id_item != nil){
        map<string, any> acl = Squid::GetACL(id_item);
        UI::ChangeWidget(`id("acl_header_name"), `Value, (acl["options"]:[])[0]:"");
        if ((acl["options"]:[])[1]:"" == "-i"){
            UI::ChangeWidget(`id("acl_regexp"), `Value, (acl["options"]:[])[2]:"");
            UI::ChangeWidget(`id("acl_regexp_case_insensitive"), `Value, true);
        }else{
            UI::ChangeWidget(`id("acl_regexp"), `Value, (acl["options"]:[])[1]:"");
        }
    }
}
boolean headerVerif()
{
    boolean ok = true;
    string header_name = (string)UI::QueryWidget(`id("acl_header_name"), `Value);
    string regexp = (string)UI::QueryWidget(`id("acl_regexp"), `Value);

    if (size(header_name) == 0 && size(regexp) == 0){
        ok = false;
        Report::Error( _("Header Name and Regular Expression must not be empty."));
    }
    return ok;
}
list<string> headerOptions()
{
    string header_name = (string)UI::QueryWidget(`id("acl_header_name"), `Value);
    string regexp = (string)UI::QueryWidget(`id("acl_regexp"), `Value);
    boolean ci = (boolean)UI::QueryWidget(`id("acl_regexp_case_insensitive"), `Value);
    list <string> ret = [header_name];

    if (ci == true)
        ret = add(ret, "-i");
    ret = add(ret, regexp);

    return ret;
}
/***************  HEADER END  *********************/


/***************  ARP  ****************************/
void arpWidgetInit(integer id_item)
{
    UI::ChangeWidget(`id("acl_mac"), `ValidChars, "1234567890ABCDEFabcdef:");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);
        UI::ChangeWidget(`id("acl_mac"), `Value, (acl["options"]:[])[0]:"");
    }
}
boolean arpVerif()
{
    boolean ok = true;
    string mac = (string)UI::QueryWidget(`id("acl_mac"), `Value);
    if (size(mac) == 0){
        ok = false;
        Report::Error( _("MAC Address must not be empty."));
    }else if (!regexpmatch(mac, "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$")){
        ok = false;
        Report::Error( _("Incorrect formar of MAC Address."));
    }
    return ok;
}
list<string> arpOptions()
{
    return [(string)UI::QueryWidget(`id("acl_mac"), `Value)];
}
/***************  ARP END  ************************/


}
/* vim: set sw=4 ts=4 et ft=ycp : */

/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/SquidACL_local_functions.ycp
 * Package:	Configuration of squid
 * Summary:	Non-global functions of SquidACL module which are linked with ACL_map variable.
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id$
 */
{

textdomain "squid";
import "Report";

import "Squid";


boolean isIPAddress(string str)
{
    return regexpmatch(str, "[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+");
}
boolean isMask(string str)
{
    return regexpmatch(str, "[0-9]+") || isIPAddress(str);
}



void widgetInitIPAddr(any id)
{
    UI::ChangeWidget(`id(id), `ValidChars, "1234567890.");
}
void widgetInitMask(any id)
{
    UI::ChangeWidget(`id(id), `ValidChars, "1234567890.");
}


/******************  SRC  *************************/
void srcWidgetInit(integer id_item)//TODO:
{
    widgetInitIPAddr("acl_addr1");
    widgetInitIPAddr("acl_addr2");
    widgetInitMask("acl_mask");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);
        list<string> tmp = [];
        list<string> data = splitstring((acl["options"]:[])[0]:"", "/");
        data[2] = data[1]:"";
        tmp = splitstring(data[0]:"", "-");
        if (size(tmp) == 1){
            data[0] = "";
            data[1] = tmp[0]:"";
        }else{
            data[0] = tmp[0]:"";
            data[1] = tmp[1]:"";
        }

        y2debug("%1", data);
        UI::ChangeWidget(`id("acl_addr1"), `Value, data[0]:"");
        UI::ChangeWidget(`id("acl_addr2"), `Value, data[1]:"");
        UI::ChangeWidget(`id("acl_mask"), `Value, data[2]:"");
    }
}

boolean srcVerif(){
    boolean ok = true;
    string addr1 = (string)UI::QueryWidget(`id("acl_addr1"), `Value);
    string addr2 = (string)UI::QueryWidget(`id("acl_addr2"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);

    if ((size(addr1) == 0 && size(addr2) == 0) ||
        (size(addr1) > 0 && !isIPAddress(addr1)) ||
        (size(addr2) > 0 && !isIPAddress(addr2)) ||
        (size(mask) > 0 && !isMask(mask))){
        ok = false;
        Report::Error( _("Invalid values."));
    }
    return ok;
}

list<string> srcStore(){
    list<string> data = [];
    string addr1 = (string)UI::QueryWidget(`id("acl_addr1"), `Value);
    string addr2 = (string)UI::QueryWidget(`id("acl_addr2"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);

    if (size(addr1) > 0 && size(addr2) > 0){
        data[0] = addr1 + "-" + addr2;
    }else{
        data[0] = addr1 + addr2;
    }
    if (size(mask) > 0 && size(addr1)+size(addr2) > 0)
        data[0] = data[0]:"" + "/" + mask;
    return data;
}
/******************  SRC END  *********************/


/******************  DST  *************************/
void dstWidgetInit(integer id_item)
{
    widgetInitIPAddr("acl_addr");
    widgetInitMask("acl_mask");

    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);
        list<string> data = splitstring((acl["options"]:[])[0]:"", "/");

        UI::ChangeWidget(`id("acl_addr"), `Value, data[0]:"");
        UI::ChangeWidget(`id("acl_mask"), `Value, data[1]:"");
    }
}

boolean dstVerif()
{
    boolean ok = true;
    string addr = (string)UI::QueryWidget(`id("acl_addr"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);

    if (!isIPAddress(addr) || (size(mask) > 0 && !isMask(mask))){
        ok = false;
        Report::Error( _("Invalid values."));
    }
    return ok;
}

list<string> dstStore()
{
    list<string> data = [];
    string addr = (string)UI::QueryWidget(`id("acl_addr"), `Value);
    string mask = (string)UI::QueryWidget(`id("acl_mask"), `Value);

    data[0] = addr;
    if (size(mask) > 0 && size(addr) > 0)
        data[0] = data[0]:"" + "/" + mask;
    return data;
}
/******************  DST END  *********************/


/******************  MYIP  ************************/
void myipWidgetInit(integer id_item)
{
    widgetInitIPAddr("acl_addr");
    widgetInitMask("acl_mask");
}
boolean myipVerif()
{
    return true;
}
list<string> myipStore()
{
    return [];
}
/******************  MYIP END  ********************/
}
/* vim: set sw=4 ts=4 et ft=ycp : */

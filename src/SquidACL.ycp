/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/SquidACL.ycp
 * Package:	Configuration of squid
 * Summary:	Definition and handling of ACL groups in Squid configuration
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id$
 */

{
module "SquidACL";
textdomain "squid";

include "squid/SquidACL_local_functions.ycp";


list<string> getKeys(map<string, any> m)
{
    list<string> ret = [];
    foreach(string key, any value, m,
        {
            ret = add(ret, key);
        });
    return ret;
}

/***
 * Unsupported ACLS:
 * * * * * * * * * * * *
 * ident, ident_regex,
 * src_as, dst_as,
 * proxy_auth, proxy_auth_regex,
 * snmp_community,
 * max_user_ip,
 * external,
 * urllogin, urlgroup
 * user_cert, ca_cert
 * ext_user
 */

/**
 * map of acl definition. format:
 *  $[
 *      "type" : $[ "name" : "Name shown in dialogs",
 *                  "widget" : `WidgetDescribingThisType,
 *                  "widget_init" : FunctionWithInitsOfWidget,
 *                  "verification" : FunctionCalledToVerificateContentsOfWidget,
 *                  "options" : FunctionThatReturnsListOfOptions
 *                 ]
 *  ]
 *
 *  widget_init prototype: void FuncName(integer id_item)
 *  verification prototype: boolean FuncName()
 *  options prototype: list<string> FuncName()
 */
map<string,map> acl_map = $[
    "src" : $[ "name" : "src",
               "widget" : `Frame( _("src"),
                            `VBox(
                                //`TextEntry(`id("acl_addr1"), _("IP Address 1"), ""),
                                //`Label(" - "),
                                `TextEntry(`id("acl_addr"), _("IP Address or Range of IP Addresses"), ""),
                                //`Label("/"),
                                `TextEntry(`id("acl_mask"), _("Network Mask"), "")
                            )
                          ),
               "widget_init" : srcWidgetInit,
               "verification" : srcVerif,
               "options" : srcOptions,
               "help" : "This is very usefull help text." ],

    "dst" : $[ "name" : "dst",
               "widget" : `Frame( _("dst"),
                            `VBox(
                                `TextEntry(`id("acl_addr"), _("IP Address"), ""),
                                `TextEntry(`id("acl_mask"), _("Network Mask"), "")
                            )
                          ),
               "widget_init" : dstWidgetInit,
               "verification" : dstVerif,
               "options" : dstOptions ],

    "myip" : $[ "name" : "myip",
                "widget" : `Frame( _("myip"),
                             `VBox(
                                 `TextEntry(`id("acl_addr"), _("Local IP Address"), ""),
                                 `TextEntry(`id("acl_mask"), _("Network Mask"), "")
                             )
                           ),
                "widget_init" : dstWidgetInit,
                "verification" : dstVerif,
                "options" : dstOptions ],

    "srcdomain" : $[ "name" : "srcdomain",
                     "widget" : `Frame( _("srcdomain"),
                                  `VBox(
                                      `TextEntry(`id("acl_domain"), _("Clients Domain Name"), "")
                                  )
                                ),
                     "widget_init" : srcdomainWidgetInit,
                     "verification" : srcdomainVerif,
                     "options" : srcdomainOptions ],

    "dstdomain" : $[ "name" : "dstdomain",
                     "widget" : `Frame( _("dstdomain"),
                                  `VBox(
                                      `TextEntry(`id("acl_domain"), _("Destination Domain"), "")
                                  )
                                ),
                     "widget_init" : srcdomainWidgetInit,
                     "verification" : srcdomainVerif,
                     "options" : srcdomainOptions ],

    "srcdom_regex" : regexp("srcdom_regex", "srcdom_regex"),
    "dstdom_regex" : regexp("dstdom_regex", "dstdom_regex"),

    "time" : $[ "name" : "time",
                "widget" : `Frame( _("time"),
                             `VBox(
                                 `HWeight(1, `MinHeight(8, `MultiSelectionBox(`id("acl_days"), _("Days"),
                                                                [`item(`id("M"), "Monday"),
                                                                 `item(`id("T"), "Tuesday"),
                                                                 `item(`id("W"), "Wednesday"),
                                                                 `item(`id("H"), "Thursday"),
                                                                 `item(`id("F"), "Friday"),
                                                                 `item(`id("A"), "Saturday"),
                                                                 `item(`id("S"), "Sunday")]))),
                                 `HWeight(1, `HBox(
                                     `TextEntry(`id("acl_from"), `opt(`shrinkable), _("From (H:M)"), ""),
                                     `TextEntry(`id("acl_to"), `opt(`shrinkable), _("To (H:M)"), "")
                                 ))
                             )
                           ),
                "widget_init" : timeWidgetInit,
                "verification" : timeVerif,
                "options" : timeOptions ],

    "url_regex" : regexp("url_regex", "url_regex"),
    "urlpath_regex" : regexp("urlpath_regex", "urlpath_regex"),

    "port" : $[ "name" : "port",
                "widget" : `Frame( _("port"),
                                `TextEntry(`id("acl_port"), _("Port Number or Range of Ports"), "")
                           ),
                "widget_init" : portWidgetInit,
                "verification" : portVerif,
                "options" : portOptions ],

    "myport" : $[ "name" : "myport",
                  "widget" : `Frame( _("myport"),
                                  `TextEntry(`id("acl_port"), _("Port Number"), "")
                             ),
                  "widget_init" : myportWidgetInit,
                  "verification" : myportVerif,
                  "options" : portOptions ],

    "proto" : $[ "name" : "proto",
                 "widget" : `Frame ( _("proto"),
                                `TextEntry(`id("acl_proto"), _("Protocol"), "")
                            ),
                 "widget_init" : protoWidgetInit,
                 "verification" : protoVerif,
                 "options" : protoOptions ],

    "method" : $[ "name" : "method",
                  "widget" : `Frame( _("method"),
                                `ComboBox(`id("acl_method"), _("HTTP Method"),
                                    [`item(`id("GET"), "GET"),
                                     `item(`id("HEAD"), "HEAD"),
                                     `item(`id("POST"), "POST"),
                                     `item(`id("PUT"), "PUT"),
                                     `item(`id("DELETE"), "DELETE"),
                                     `item(`id("TRACE"), "TRACE"),
                                     `item(`id("CONNECT"), "CONNECT")])
                             ),
                  "widget_init" : methodWidgetInit,
                  "verification" : methodVerif,
                  "options" : methodOptions ],

    "browser" : regexp("browser", "browser"),

    "maxconn" : $[ "name" : "maxconn",
                   "widget" : `Frame("maxconn",
                                `IntField(`id("acl_connections"), _("Maximum Number of HTTP Connections"), 0, 999999, 0)
                              ),
                   "widget_init" : maxconnWidgetInit,
                   "verification" : maxconnVerif,
                   "options" : maxconnOptions ],

    "referer_regex" : regexp("referer_regex", "referer_regex"),

    "req_header" : $[ "name" : "req_header",
                      "widget" : `Frame( "req_header",
                                    `VBox(
                                        `TextEntry(`id("acl_header_name"), _("Header Name"), ""),
                                        `TextEntry(`id("acl_regexp"), _("Regular Expression(s)"), ""),
                                        `CheckBox(`id("acl_regexp_case_insensitive"), _("Case Insensitive"), false)
                                    )
                                 ),
                      "widget_init" : headerWidgetInit,
                      "verification" : headerVerif,
                      "options" : headerOptions ],

    "rep_header" : $[ "name" : "rep_header",
                      "widget" : `Frame( "rep_header",
                                    `VBox(
                                        `TextEntry(`id("acl_header_name"), _("Header Name"), ""),
                                        `TextEntry(`id("acl_regexp"), _("Regular Expression(s)"), ""),
                                        `CheckBox(`id("acl_regexp_case_insensitive"), _("Case Insensitive"), false)
                                    )
                                 ),
                      "widget_init" : headerWidgetInit,
                      "verification" : headerVerif,
                      "options" : headerOptions ],

    "req_mime_type" : regexp("req_mime_type", "req_mime_type"),
    "rep_mime_type" : regexp("rep_mime_type", "rep_mime_type"),

    "arp" : $[ "name" : "arp",
               "widget" : `Frame( "arp",
                            `TextEntry(`id("acl_mac"), _("MAC Address"), "")
                          ),
               "widget_init" : arpWidgetInit,
               "verification" : arpVerif,
               "options" : arpOptions ]
];

/**
 * List of available acls.
 * Also specify order of acls.
 * Values must corespond with keys in acl_map.
 */
list<string> acl = sort(getKeys(acl_map));



/**
 * Returns list of supported ACLs.
 * It's necessary to have saved unsupported ACLs but do not handle with them.
 */
global list<string> SupportedACLs()
{
    return acl;
}

/**
 * Returns list of terms in form:
 *      [ `item(`id(key), acl_map[key]["name"]:""), `item(... ) ]
 * Returned list is preferably to place in UI::ComboBox as list of
 * all available types of ACLs.
 */
global list<term> GetTypesToComboBox()
{
    list<term> items = [];

    foreach(string value, acl,
        {
            items = add(items, `item(`id(value), (acl_map[value]:$[])["name"]:""));
        });

    return items;
}


/**
 * Initialize widget of acl identified by id_acl_type.
 * If id_item is not nil, function initialize widgets by default values
 * from module Squid.
 */
global void InitWidget(string id_acl_type, integer id_item, any help_widget_id)
{
    if (help_widget_id != nil){
        UI::ChangeWidget(`id(help_widget_id), `Value, (acl_map[id_acl_type]:$[])["help"]:"");
    }
    void(integer) func = (void(integer))(acl_map[id_acl_type]:$[])["widget_init"]:nil;
    func(id_item);
}

/**
 * Replace widget with id widget_id by widget acl_map[id_acl_type]["widget"].
 */
global void Replace(any widget_id, string id_acl_type)
{
    UI::ReplaceWidget(`id(widget_id), (acl_map[id_acl_type]:$[])["widget"]:`Empty());
}


/**
 * This function call verification function joined with acl type
 * identified by id_acl_type.
 * Returns return value of verification function.
 */
global boolean Verify(string id_acl_type)
{
    boolean() func = (boolean())(acl_map[id_acl_type]:$[])["verification"]:nil;
    return (boolean)func();
}


/**
 * Returns values from widget as list of options in correct form to store
 * them into Squid module.
 */
global list<string> GetOptions(string id_acl_type)
{
    list<string>() func = (list<string>())(acl_map[id_acl_type]:$[])["options"]:nil;
    return func();
}
}
/* vim: set sw=4 ts=4 et ft=ycp : */

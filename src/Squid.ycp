/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/Squid.ycp
 * Package:	Configuration of squid
 * Summary:	Squid settings, input and output functions
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id: Squid.ycp 27914 2006-02-13 14:32:08Z locilka $
 *
 * Representation of the configuration of squid.
 * Input and output routines.
 */

{

module "Squid";
textdomain "squid";

import "Progress";
import "Report";
import "Summary";
import "Message";

path squid_path = .squid;


/**
 * Data was modified?
 */
boolean modified = false;

/**
 * Map of all configuration settings except consequential
 */
map<string,any> settings = $[];

/**
 * List of http_ports. Format:
 * [ $["host" : "hostname",
 *     "port" : 3128,
 *     "transparent" : true],
 *     ...
 * ]
 */
list <map <string,any> > http_ports = [];

/** TODO
 * List of acls. Format:
 * [ $[ ???
 */
list <map <string,any> > acls = [];

/**
 * List of access control parameters. Format:
 * [ $["allow" : true,
 *     "acl" : ["acl1", "!acl2", ...] ],
 *     ...
 * ]
 */
list <map <string,any> > http_accesses = [];

/**
 * List of refresh patterns. Format:
 * [ $["regexp" : "^ftp:",
 *     "min" : 12,
 *     "max" : 12,
 *     "percent" : 12],
 *     ...
 * ]
 */
list <map <string,any> > refresh_patterns = [];




global boolean Modified(){
    return modified;
}


/**
 */
global boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
global boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

/**
 * Abort function
 * @return boolean return true if abort
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
    {
	return AbortFunction () == true;
    }
    return false;
}


/**
 * Read setting of parameter http_port. It can be in form:
 * http_port [hostname:]port [transparent]
 *
 * return true on success
 */
boolean readHttpPorts()
{
    list tmp = [];
    list tmp2 = [];
    map <string,any> tmp_http_port = $[];

    http_ports = [];
    foreach (string value, (list<string>)SCR::Read(add(squid_path,"http_port")),
        {
            tmp_http_port = $[];
            tmp = [];
            tmp2 = [];

            tmp = splitstring(value," \t");

            //can parse only 'http_port hostname:port [transparent]'
            if (size(tmp) < 1 || size(tmp) > 2) return false;

            // hostname and port
            tmp2 = splitstring(tmp[0]:"",":");
            y2debug("readHttpPorts - tmp2: %1",tmp2);
            if (size(tmp2) == 1){
                tmp_http_port["host"] = "";
                tmp_http_port["port"] = tointeger(tmp2[0]:"");
            }else{
                tmp_http_port["host"] = (string)tmp2[0]:"";
                tmp_http_port["port"] = tointeger(tmp2[1]:"");
            }

            //transparent option
            if (size(tmp) == 2 && tmp[1]:"" == "transparent")
                tmp_http_port["transparent"] = true;

            http_ports = add(http_ports, tmp_http_port);
        });

    return true;
}

/**
 * Read all squid settings
 * @return true on success
 */
global boolean Read() {
    boolean ok = true;

    /* Squid read dialog caption */
    string caption = _("Initializing squid Configuration");

    integer steps = 2;

    Progress::New(caption, " ", steps, [_("Read the settings")], [_("Reading the settings..."), _("Finished")], "");

    if(Abort()) return false;
    Progress::NextStage();

    if (!readHttpPorts()) ok = false;
    // TODO:
    //if (!readRefreshPatterns()) ok = false;
    //if (!readACLs()) ok = false;
    //if (!readHttpAccesses()) ok = false;
    //if (!readRestSetting()) ok = false;

    y2debug("Squid::Read - http_ports: %1",http_ports);

    /* Error message */
    if(!ok) Report::Error(_("Cannot read configuration file."));

    Progress::NextStep();

    return true;
}

/**
 * Write all squid settings
 * @return true on success
 */
global boolean Write() {

    /* Squid read dialog caption */
    string caption = _("Saving squid Configuration");

    // TODO FIXME And set the right number of stages
    integer steps = 2;

    integer sl = 500;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/2 */
	    _("Write the settings"),
	    /* Progress stage 2/2 */
	    _("Run SuSEconfig")
	], [
	    /* Progress step 1/2 */
	    _("Writing the settings..."),
	    /* Progress step 2/2 */
	    _("Running SuSEconfig..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    // write settings
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error (_("Cannot write settings."));
    sleep(sl);

    // run SuSEconfig
    if(Abort()) return false;
    Progress::NextStage ();
    /* Error message */
    if(false) Report::Error (Message::SuSEConfigFailed());
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Get all squid settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    // TODO FIXME: your code here (fill the above mentioned variables)...
    return true;
}

/**
 * Dump the squid settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    // TODO FIXME: your code here (return the above mentioned variables)...
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list Summary() {
    // TODO FIXME: your code here...
    /* Configuration summary text for autoyast */
    return [ _("Configuration summary..."), [] ];
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global list Overview() {
    // TODO FIXME: your code here...
    return [];
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    // TODO FIXME: your code here...
    return $[ "install":[], "remove":[] ];
}

/* EOF */
}
/* vim: set sw=4 ts=4 et ft=ycp : */

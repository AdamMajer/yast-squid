/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/wizards.ycp
 * Package:	Configuration of squid
 * Summary:	Wizards definitions
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id: wizards.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "squid";

import "Sequencer";
import "Wizard";
import "Label";

include "squid/complex.ycp";



/**
 * Main workflow of the squid configuration
 * @return sequence result
 */
any MainSequence(boolean start_up_dialog) {
    map aliases = $[ "main" : ``(MainDialog(start_up_dialog))];
    map sequence = $[
        "ws_start" : "main",
        "main" : $[
            `abort : `abort,
            `next : `next
        ]
    ];
    any ret = Sequencer::Run(aliases, sequence);

    return ret;
}

/**
 * Whole configuration of squid
 * @return sequence result
 */
any SquidSequence() {

    map aliases = $[
    "read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence(true) ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of squid but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any SquidAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("Squid Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = MainSequence(false);

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
/* vim: set sw=4 ts=4 et ft=ycp : */

/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/inits.ycp
 * Package:	Configuration of squid
 * Summary:	All Init... functions for dialogs.
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id$
 */

{

textdomain "squid";

import "Squid";
import "SquidACL";
import "SquidErrorMessages";


include "squid/helps.ycp";




/**
 * Do simple initialization of dialog.
 * Given map has to be in form:
 *      $[ id_of_widget : value_on_which_has_to_be_set,
 *         ....
 *       ]
 */
void simpleInit(map<string,any> m)
{
    foreach(string key, any value, m,
        {
            UI::ChangeWidget(`id(key), `Value, value);
        });
}




/********************  HTTP_PORT  *****************/
void InitHttpPortsTable(string key)
{
    list items = [];
    integer i = 0;

    foreach(map<string,any> value, Squid::GetHttpPorts(),
        {
            items = add(items, `item(`id(i), value["host"]:"", value["port"]:"",
                                      (value["transparent"]:false ? "transparent" : "")));
            i = i+1;
        });

    y2debug("complex::InitPortsTable() - items: %1, http_ports: %2", items, Squid::GetHttpPorts());
    UI::ChangeWidget(`id("http_port"), `Items, items);
    if (size(items) > 0){
        UI::ChangeWidget(`id(`edit), `Enabled, true);
        UI::ChangeWidget(`id(`del), `Enabled, true);
    }else{
        UI::ChangeWidget(`id(`edit), `Enabled, false);
        UI::ChangeWidget(`id(`del), `Enabled, false);
    }
}
void InitAddEditHttpPortDialog(integer id_item)
{
    if (id_item != nil){
        map<string,any> values = Squid::GetHttpPort(id_item);

        UI::ChangeWidget(`id("host"), `Value, values["host"]:"");
        UI::ChangeWidget(`id("port"), `Value, values["port"]:"");
        UI::ChangeWidget(`id("transparent"), `Value, values["transparent"]:false);
    }
}
/********************  HTTP_PORT END  *************/



/*****************  REFRESH_PATTERNS  *************/
void InitRefreshPatternsTable(string key)
{
    list items = [];
    integer i = 0;

    foreach (map<string,any> value, Squid::GetRefreshPatterns(),
        {
            items = add(items, `item(`id(i), value["regexp"]:"", value["min"]:"",
                        value["percent"]:"", value["max"]:""));

            i = i+1;
        });

    y2debug("complex::InitRefreshPatternsTable() - items: %1", items);
    UI::ChangeWidget(`id("refresh_patterns"), `Items, items);
    if (size(items) > 0){
        UI::ChangeWidget(`id(`edit), `Enabled, true);
        UI::ChangeWidget(`id(`del), `Enabled, true);
        UI::ChangeWidget(`id(`up), `Enabled, true);
        UI::ChangeWidget(`id(`down), `Enabled, true);
    }else{
        UI::ChangeWidget(`id(`edit), `Enabled, false);
        UI::ChangeWidget(`id(`del), `Enabled, false);
        UI::ChangeWidget(`id(`up), `Enabled, false);
        UI::ChangeWidget(`id(`down), `Enabled, false);
    }
}
void InitAddEditRefreshPatternDialog(integer id_item)
{
    if (id_item != nil){
        map<string,any> values = Squid::GetRefreshPattern(id_item);

        UI::ChangeWidget(`id("regexp"), `Value, values["regexp"]:"");
        UI::ChangeWidget(`id("min"), `Value, tointeger(values["min"]:""));
        UI::ChangeWidget(`id("percent"), `Value, tointeger(values["percent"]:""));
        UI::ChangeWidget(`id("max"), `Value, tointeger(values["max"]:""));
        UI::ChangeWidget(`id("regexp_case_insensitive"), `Value, !values["case_sensitive"]:true);

        y2debug("complex::InitAddEditRefreshPatternDialog() - values: %1",values);
    }
}
/*****************  REFRESH_PATTERNS END  *********/


/*****************  CACHE DIALOG  *****************/
void InitCache2Dialog(string key)
{
    map<string, list> set = (map<string, list>)Squid::GetSettings();
    simpleInit($[
        "cache_mem" : tointeger((set["cache_mem"]:[])[0]:""),
        "cache_mem_units" : (set["cache_mem"]:[])[1]:"",
        "cache_max_object_size" : tointeger((set["maximum_object_size"]:[])[0]:""),
        "cache_max_object_size_units" : (set["maximum_object_size"]:[])[1]:"",
        "cache_min_object_size" : tointeger((set["minimum_object_size"]:[])[0]:""),
        "cache_min_object_size_units" : (set["minimum_object_size"]:[])[1]:"",
        "cache_swap_low" : tointeger((set["cache_swap_low"]:[])[0]:""),
        "cache_swap_high" : tointeger((set["cache_swap_high"]:[])[0]:""),
        "cache_replacement_policy" : (set["cache_replacement_policy"]:[])[0]:"",
        "memory_replacement_policy" : (set["memory_replacement_policy"]:[])[0]:""
    ]);
    UI::ChangeWidget(`id("cache_max_object_size"), `Notify, true);
    UI::ChangeWidget(`id("cache_min_object_size"), `Notify, true);
    UI::ChangeWidget(`id("cache_max_object_size_units"), `Notify, true);
    UI::ChangeWidget(`id("cache_min_object_size_units"), `Notify, true);

    UI::ChangeWidget(`id("cache_swap_low"), `Notify, true);
    UI::ChangeWidget(`id("cache_swap_high"), `Notify, true);
}

void InitCacheDirectoryDialog(string key)
{
    map<string, list> set = (map<string, list>)Squid::GetSettings();
    simpleInit($[
        "cache_dir" : (set["cache_dir"]:[])[1]:"",
        "mbytes" : tointeger((set["cache_dir"]:[])[2]:""),
        "l1dirs" : tointeger((set["cache_dir"]:[])[3]:""),
        "l2dirs" : tointeger((set["cache_dir"]:[])[4]:"")
    ]);
}
/*****************  CACHE DIALOG END  *************/


/*****************  ACL  **************************/
void InitACLGroupsTable(string key)
{
    list items = [];
    integer i = 0;
    list<string> sup_acls = SquidACL::SupportedACLs();

    foreach(map<string,any> value, Squid::GetACLs(),
        {
            // test, if know how to handle this ACL
            if (contains(sup_acls, value["type"]:"")){
                items = add(items, `item(`id(i), value["name"]:"", value["type"]:"",
                                         mergestring(value["options"]:[], " ")));
                i = i+1;
            }
        });

    UI::ChangeWidget(`id("acl"), `Items, items);
    if (size(items) > 0){
        UI::ChangeWidget(`id(`edit_acl), `Enabled, true);
        UI::ChangeWidget(`id(`del_acl), `Enabled, true);
    }else{
        UI::ChangeWidget(`id(`edit_acl), `Enabled, false);
        UI::ChangeWidget(`id(`del_acl), `Enabled, false);
    }
}


void InitAddEditACLDialog(integer id_item)
{
    if (id_item != nil){
        map<string,any> acl = Squid::GetACL(id_item);
        UI::ChangeWidget(`id("name"), `Value, acl["name"]:"");
        UI::ChangeWidget(`id("type"), `Value, acl["type"]:"");
    }
}
/*****************  ACL END  **********************/


/*****************  HTTP_ACCESS  ******************/
void InitHttpAccessTable(string key)
{
    list items = [];
    integer i = 0;

    foreach(map<string,any> value, Squid::GetHttpAccesses(),
        {
            items = add(items, `item(`id(i), (value["allow"]:true ? "allow" : "deny"),
                                     mergestring(value["acl"]:[], " ")));
            i = i+1;
        });

    UI::ChangeWidget(`id("http_access"), `Items, items);
    if (size(items) > 0){
        UI::ChangeWidget(`id(`edit_http_access), `Enabled, true);
        UI::ChangeWidget(`id(`del_http_access), `Enabled, true);
        UI::ChangeWidget(`id(`up_http_access), `Enabled, true);
        UI::ChangeWidget(`id(`down_http_access), `Enabled, true);
    }else{
        UI::ChangeWidget(`id(`edit_http_access), `Enabled, false);
        UI::ChangeWidget(`id(`del_http_access), `Enabled, false);
        UI::ChangeWidget(`id(`up_http_access), `Enabled, false);
        UI::ChangeWidget(`id(`down_http_access), `Enabled, false);
    }
}


void InitAddEditHttpAccessDialog(integer id_item)
{
    list items = [];
    list acls_items = [];

    if (id_item != nil){
        map<string, any> http_access = Squid::GetHttpAccess(id_item);
        integer i = 0;

        foreach(string value, http_access["acl"]:[],
            {
                items = add(items, `item(`id(i), (search(value,"!")==0 ? "not" : ""), deletechars(value, "!")));
                i = i+1;
            });
        UI::ChangeWidget(`id("acls"), `Items, items);
        UI::ChangeWidget(`id("allow_deny"), `Value, (http_access["allow"]:true ? "allow" : "deny"));

        items = [];
    }

    foreach(term value, (list<term>)UI::QueryWidget(`id("acls"), `Items),
        {
            acls_items = add(acls_items, value[2]:"");
        });

    foreach(map<string,any> value, Squid::GetACLs(),
        {
            if (!contains(items, `item(`id(value["name"]:""), value["name"]:"")) &&
                !contains(acls_items, value["name"]:""))
                items = add(items, `item(`id(value["name"]:""), value["name"]:""));
        });
    UI::ChangeWidget(`id("acl"), `Items, items);
    UI::ChangeWidget(`id("acl_not"), `Value, false);
}
/*****************  HTTP_ACCESS END  **************/




/**********  LOGGING AND TIMETOUS DIALOG  *********/
void InitLoggingFrame(string key)
{
    map<string, list> set = (map<string, list>)Squid::GetSettings();
    simpleInit($[
        "access_log" : (set["access_log"]:[])[0]:"",
        "cache_log" : (set["cache_log"]:[])[0]:"",
        "cache_store_log" : (set["cache_store_log"]:[])[0]:"",

        "emulate_httpd_log" : ((set["emulate_httpd_log"]:[])[0]:"" == "on" ? true : false)
    ]);
}

void InitTimeoutsFrame(string key)
{
    map<string, list> set = (map<string, list>)Squid::GetSettings();
    simpleInit($[
        "connect_timeout" : tointeger((set["connect_timeout"]:[])[0]:""),
        "connect_timeout_units" : (set["connect_timeout"]:[])[1]:"",
        "client_lifetime" : tointeger((set["client_lifetime"]:[])[0]:""),
        "client_lifetime_units" : (set["client_lifetime"]:[])[1]:""
    ]);
}
/**********  LOGGING AND TIMETOUS DIALOG END  *****/


void InitMiscellaneousFrame(string key)
{
    simpleInit($[
        "cache_mgr" : (Squid::GetSetting("cache_mgr"))[0]:"",
        "ftp_passive" : (Squid::GetSetting("ftp_passive"))[0]:"" == "on" ? true : false
    ]);
    UI::ChangeWidget(`id("error_language"), `Items, SquidErrorMessages::GetLanguagesToComboBox());
    UI::ChangeWidget(`id("error_language"), `Value, SquidErrorMessages::GetLanguageFromPath(
                                                        (Squid::GetSetting("error_directory"))[0]:""
                                                    ));
}


}
/* vim: set sw=4 ts=4 et ft=ycp : */

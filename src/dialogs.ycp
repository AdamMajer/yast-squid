/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/dialogs.ycp
 * Package:	Configuration of squid
 * Summary:	Dialogs definitions
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "squid";

import "Label";

include "squid/helper_functions.ycp";


term HttpPortsTableWidget()
{
    return `VBox(
                `Left(`Label( _("HTTP Ports"))),
                `Table(`id("http_port"), `opt(`notify), `header(_("Host"), _("Port"), _("Options"))),
                `HBox(
                    `PushButton(`id(`add), Label::AddButton()),
                    `PushButton(`id(`edit), Label::EditButton()),
                    `PushButton(`id(`del), Label::DeleteButton()),
                    `HStretch()
                )
           );
}

term RefreshPatternsTableWidget()
{
    return
        `VBox(
            `Left(`Label( _("Refresh Patterns"))),
            `HBox(
                `Table(`id("refresh_patterns"), `opt(`keepSorting, `notify),
                       `header(_("Regular Expression"),
			    // table header, stands for minimum
			    _("Min"),
			    // table header
			    _("Percent"),
			    // table header, stands for maximum
			    _("Max")/*, _("Options")*/)),
                `Top(`VBox(
                    `PushButton(`id(`up), Label::UpButton()),
                    `PushButton(`id(`down), Label::DownButton())
                ))
            ),
            `HBox(
                `PushButton(`id(`add), Label::AddButton()),
                `PushButton(`id(`edit), Label::EditButton()),
                `PushButton(`id(`del), Label::DeleteButton()),
                `HStretch()
            )
        );
}

term Cache2DialogWidget()
{
    return
        `HBox(
            `HSpacing(3),
            `Frame(_("Cache Setting"),
                `VBox(
                    `VWeight(1, `HBox(
                        `IntField(`id("cache_mem"), _("C&ache Memory"), 1, 99999, 10),
                        sizeUnitWidget("cache_mem_units")
                    )),
                    `VSpacing(0.4),
                    `VWeight(1, `HBox(
                        `IntField(`id("cache_max_object_size"), _("Ma&x Object Size"), 0, 99999, 0),
                        sizeUnitWidget("cache_max_object_size_units")
                    )),
                    `VSpacing(0.4),
                    `VWeight(1, `HBox(
                        `IntField(`id("cache_min_object_size"), _("M&in Object Size"), 0, 99999, 0),
                        sizeUnitWidget("cache_min_object_size_units")
                    )),
                    `VSpacing(0.4),
                    `VWeight(1, `HBox(
                        `IntField(`id("cache_swap_low"), _("Swap &Low-Water Mark (percentage)"), 0, 100, 0)
                    )),
                    `VSpacing(0.4),
                    `VWeight(1, `HBox(
                        `IntField(`id("cache_swap_high"), _("Swap &High-Water Mark (percentage)"), 0, 100, 0)
                    )),
                    `VSpacing(0.4),
                    `Left(`VWeight(1, `HBox(
                        `ComboBox(`id("cache_replacement_policy"),
                                  _("&Cache Replacement Policy"),
                                  [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")])
                    ))),
                    `VSpacing(0.4),
                    `Left(`VWeight(1, `HBox(
                        `ComboBox(`id("memory_replacement_policy"),
                                  _("&Memory Replacement Policy"),
                                  [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")])
                    )))
                )
            ),
            `HSpacing(3)
        );
    /*
        `HBox(
            `HSpacing(3),
            `Frame(_("Cache Setting"),
                `HBox(
                    `HWeight(1,`VBox(
                        `VWeight(1, `HBox(
                            `IntField(`id("cache_mem"), _("C&ache Memory"), 1, 99999, 10),
                            sizeUnitWidget("cache_mem_units")
                        )),
                        `VSpacing(0.4),
                        `VWeight(1, `HBox(
                            `IntField(`id("cache_max_object_size"), _("Ma&x Object Size"), 0, 99999, 0),
                            sizeUnitWidget("cache_max_object_size_units")
                        )),
                        `VSpacing(0.4),
                        `VWeight(1, `HBox(
                            `IntField(`id("cache_swap_low"), _("Swap &Low-Water Mark (in percents)"), 0, 100, 0)
                        )),
                        `VSpacing(0.4),
                        `Left(`VWeight(1, `HBox(
                            `ComboBox(`id("cache_replacement_policy"),
                                      _("&Cache Replacement Policy"),
                                      [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")])
                        )))
                    )),
                    `HSpacing(3),
                    `HWeight(1,`VBox(
                        `VWeight(1, `HBox(`Empty())),
                        `VSpacing(0.4),
                        `VWeight(1, `HBox(
                            `IntField(`id("cache_min_object_size"), _("M&in Object Size"), 0, 99999, 0),
                            sizeUnitWidget("cache_min_object_size_units")
                        )),
                        `VSpacing(0.4),
                        `VWeight(1, `HBox(
                            `IntField(`id("cache_swap_high"), _("Swap &High-Water Mark (in percents)"), 0, 100, 0)
                        )),
                        `VSpacing(0.4),
                        `Left(`VWeight(1, `HBox(
                            `ComboBox(`id("memory_replacement_policy"),
                                      _("&Memory Replacement Policy"),
                                      [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")])
                        )))
                    ))
                )
            ),
            `HSpacing(3)
        );
        */
}

term CacheDirectoryDialog()
{
    return
        `HBox(
            `HSpacing(3),
            `Frame(_("Cache Directory"),
                `VBox(
                    `VSquash(`HBox(
                        `TextEntry(`id("cache_dir"), _("&Directory Name"), ""),
                        `Bottom(`PushButton(`id(`browse_cache_dir), Label::BrowseButton()))
                    )),
                    `VSpacing(0.4),
                    `IntField(`id("mbytes"), _("&Size (in MB)"), 1, 99999, 1),
                    `VSpacing(0.4),
                    `IntField(`id("l1dirs"), _("L&evel 1 Directories"), 1, 99999, 1),
                    `VSpacing(0.4),
                    `IntField(`id("l2dirs"), _("Le&vel 2 Directories"), 1, 99999, 1)
                )
            ),
            `HSpacing(3)
        );
}



term ACLGroupsTableWidget()
{
    return
        `VBox(
            `Left(`Label(_("ACL Groups"))),
            `Table(`id("acl"), `opt(`notify), `header(_("Name"), _("Type"), _("Description"))),
            `HBox(
                `PushButton(`id(`add_acl), Label::AddButton()),
                `PushButton(`id(`edit_acl), Label::EditButton()),
                `PushButton(`id(`del_acl), Label::DeleteButton()),
                `HStretch()
            )
        );
}

term HttpAccessTableWidget()
{
    return
        `VBox(
            `Left(`Label(_("Access Control"))),
            `HBox(
                `Table(`id("http_access"), `opt(`keepSorting, `notify), `header(_("Allow/Deny"), _("ACL Groups"))),
                `HSquash(`Top(`VBox(
                    `HWeight(1, `PushButton(`id(`up_http_access), Label::UpButton())),
                    `HWeight(1, `PushButton(`id(`down_http_access), Label::DownButton()))
                )))
            ),
            `HBox(
                `PushButton(`id(`add_http_access), Label::AddButton()),
                `PushButton(`id(`edit_http_access), Label::EditButton()),
                `PushButton(`id(`del_http_access), Label::DeleteButton()),
                `HStretch()
            )
        );
}

term LoggingFrameWidget()
{
    return
            `Frame(_("Logging"),
                `VBox(
                    `VSquash(`HBox(
                        `TextEntry(`id("access_log"), _("&Access Log") , ""),
                        `Bottom(`PushButton(`id(`access_log_browse), Label::BrowseButton()))
                    )),
                    `VSquash(`HBox(
                        `TextEntry(`id("cache_log"), _("&Cache Log"), ""),
                        `Bottom(`PushButton(`id(`cache_log_browse), Label::BrowseButton()))
                    )),
                    `VSquash(`HBox(
                        `TextEntry(`id("cache_store_log"), _("Cache &Store Log"), ""),
                        `Bottom(`PushButton(`id(`cache_store_log_browse), Label::BrowseButton()))
                    )),
                    `Left(`CheckBox(`id("emulate_httpd_log"), _("&Emulate Httpd Log?")))
                )
            );
}

term TimeoutsFrameWidget()
{
    return
            `Frame(_("Timeouts"),
                `VBox(
                    `HBox(
                       `IntField(`id("connect_timeout"), _("Connection &Timeout"), 0, 99999, 0),
                       timeUnitWidget("connect_timeout_units")
                    ),
                    `HBox(
                       `IntField(`id("client_lifetime"), _("Client &Lifetime"), 0, 99999, 0),
                       timeUnitWidget("client_lifetime_units")
                    )
                )
            );
}


term MiscellaneousFrameWidget()
{
    return
        `HVCenter(`Frame(_("Miscellaneous Setting"), `VBox(
                `ComboBox(`id("error_language"),
                                 _("&Language of error messages"),
                                 []),
                 `VSpacing(),
                 `TextEntry(`id("cache_mgr"), _("&Administrator's e-mail"), ""),
                 `VSpacing(),
                 `Left(`CheckBox(`id("ftp_passive"), _("&Use Ftp Passive Mode")))
        )));
}

/* EOF */
}
/* vim: set sw=4 ts=4 et ft=ycp : */

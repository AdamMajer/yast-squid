/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squid/dialogs.ycp
 * Package:	Configuration of squid
 * Summary:	Dialogs definitions
 * Authors:	Daniel Fiser <dfiser@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "squid";

import "Label";
import "Wizard";
import "Squid";

include "squid/helps.ycp";


/**
 * Returns a widget with setting of units
 */
term sizeUnitWidget(string id)
{
    return `ComboBox(`id(id), " ",
                [`item("KB"), `item("MB")]);
}
/**
 * Returns a widget with setting of units
 */
term timeUnitWidget(string id)
{
    return `ComboBox(`id(id), " ",
                [`item("seconds"), `item("minutes")]);
}


/**
 * returns true if something added/edited otherwise false
 */
boolean AddEditHttpPortDialog(any id_item)
{
    any ui = nil;
    boolean ret = false;
    string label = (id_item == nil ? _("Add New HTTP Port")
                                   : _("Edit Current HTTP Port"));

    term contents =
        `VBox(
            `Left(`Label(label)),
            `TextEntry(`id("host"), _("Host"), ""),
            `TextEntry(`id("port"), _("Port"), ""),
            `Frame(_("Options"),
                `VBox(
                    `CheckBox(`id("transparent"), "Transparent", false)
                )
            ),
            `VSpacing(),
            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        );

    UI::OpenDialog(`opt(`decorated), contents);
    UI::ChangeWidget(`id("port"), `ValidChars, "1234567890");

    while (true){
        ui = UI::UserInput();

        if (ui == `abort || ui == `cancel){
            ret = false;
            break;
        }else if (ui == `ok){
            ret = true;
            break;
        }
    }

    UI::CloseDialog();
    return ret;
}



any HttpPortsDialog(){
    any ret = nil;
    any http_port = nil;

    term dialog_contents =
        `VBox(
            `Left(`Label( _("HTTP Ports"))),
            `Table(`id("http_port"), `header(_("Host"), _("Port"), _("Options"))),
            `HBox(
                `PushButton(`id(`add), Label::AddButton()),
                `PushButton(`id(`del), Label::DeleteButton()),
                `PushButton(`id(`edit), Label::EditButton()),
                `HStretch()
            )
        );

    Wizard::SetContentsButtons(_("Squid - HTTP Ports Setting"), dialog_contents, "help text ad",
        Label::BackButton(), Label::NextButton());
    Wizard::DisableBackButton();

    UI::ChangeWidget(`id("http_port"), `Items, [`item(`id(1), "localhost","3128",""), `item(`id(2), "","80","tranparent")]);


    while (true){
        ret = UI::UserInput();

        y2debug("HttpPortsDialog(): ret == %1",ret);

        if (ret == `next) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }else if (ret == `add){
            AddEditHttpPortDialog(nil);
        }else if (ret == `edit){
            AddEditHttpPortDialog(UI::QueryWidget(`id("http_port"), `CurrentItem));

            http_port = UI::QueryWidget(`id("http_port"), `CurrentItem);
            y2debug("id: %1, currentPort: %2, currentPortValue: %3", ret, http_port,UI::QueryWidget(`id("http_port"), `Item(http_port)));
        }
    }

    return ret;
}


boolean AddEditRefreshPattern(any id_item)
{
    boolean ret = false;
    any ui = nil;
    string label = (id_item == nil ? _("Add New Refresh Pattern")
                                   : _("Edit Current refresh Pattern"));
    term contents =
        `VBox(
            `Left(`Label(label)),

            `HBox(
                `TextEntry(`id("regexp"), _("Regular Expression"), ""),
                `CheckBox(`id("regexp_case_insensitive"), _("Case Insensitive"))
            ),
            `HBox(
                `Bottom(`IntField(`id("min"), _("Min"), 1, 99999, 10)),
                `Bottom(`Label(_("minutes")))
            ),
            `HBox(
                `Bottom(`IntField(`id("percent"), _("Percent"), 1, 99999, 10)),
                `Bottom(`Label("%"))
            ),
            `HBox(
                `Bottom(`IntField(`id("max"), _("Max"), 1, 99999, 10)),
                `Bottom(`Label(_("minutes")))
            ),

            `VSpacing(),

            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        );

    UI::OpenDialog(`opt(`decorated), contents);

    while (true){
        ui = UI::UserInput();

        if (ui == `cancel || ui == `abort){
            ret = false;
            break;
        }else if (ui == `ok){
            ret = true;
            break;
        }
    }

    UI::CloseDialog();
    return ret;
}

any CacheDialog(){
    any ret = nil;
    term dialog_contents =
        `VBox(
            `Left(`Label( _("Refresh Patterns"))),
            `Table(`id("refresh_patterns"), `header(_("Regular Expression"), _("Min"), _("Precent"), _("Max")/*, _("Options")*/)),
            `HBox(
                `PushButton(`id(`add), Label::AddButton()),
                `PushButton(`id(`del), Label::DeleteButton()),
                `PushButton(`id(`modify), Label::EditButton()),
                `HStretch()
            )
        );

    Wizard::SetContentsButtons(_("Squid - Cache Setting"), dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    while (true){
        ret = UI::UserInput();

        y2debug("CacheDialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }else if (ret == `add){
            AddEditRefreshPattern(nil);
        }
    }

    return ret;
}

boolean CacheDirAdvancedSettingDialog(){
    boolean ret = false;
    any ui = nil;
    term contents =
        `VBox(
            `Left(`Label( _("Cache Directory Advanced Setting"))),

            `ComboBox(`id("type"), _("Type"), []),
            `HBox(
                `IntField(`id("mbytes"), _("Size"), 1, 99999, 10),
                `Bottom(`Label(_("MB")))
            ),
            `IntField(`id("l1dirs"), _("Level 1 Directories"), 1, 99999, 20),
            `IntField(`id("l2dirs"), _("Level 2 Directories"), 1, 99999, 20),

            `VSpacing(),

            `HBox(
                `PushButton(`id(`cancel), Label::CancelButton()),
                `PushButton(`id(`ok), Label::OKButton())
            )
        );

    UI::OpenDialog(contents);

    while (true){
        ui = UI::UserInput();

        if (ui == `cancel || ui == `abort){
            ret = false;
            break;
        }else if (ui == `ok){
            ret = true;
            break;
        }
    }


    UI::CloseDialog();
    return ret;
}

any Cache2Dialog(){
    any ret = nil;
    term dialog_contents =
        `VBox(
            `Top(`Left(
                `VBox(
                    `HBox(
                        `HSquash(`IntField(`id("cache_mem"), _("Cache Memory"), 1, 99999, 10)),
                        sizeUnitWidget("cache_mem_units"),
                        `HStretch()
                    ),
                    `VSpacing(),
                    `HBox(
                        `HSquash(`IntField(`id("cache_max_object_size"), _("Max Object Size"), 1, 99999, 10)),
                        sizeUnitWidget("cache_max_object_size_units"),
                        `HSpacing(3),
                        `HSquash(`IntField(`id("cache_min_object_size"), _("Min Object Size"), 1, 99999, 10)),
                        sizeUnitWidget("cache_min_object_size_units"),
                        `HStretch()
                    ),
                    `VSpacing(),
                    `VSquash(`HBox(
                        `HSquash(`IntField(`id("cache_swap_low"), _("Swap Low-Water Mark"), 1, 100, 10)),
                        `Bottom(`Label("%")),
                        `HSpacing(3),
                        `HSquash(`IntField(`id("cache_swap_high"), _("Swap High-Water Mark"), 1, 100, 10)),
                        `Bottom(`Label("%")),
                        `HStretch()
                    )),
                    `VSpacing(),
                    `Left(`HBox(
                        `ComboBox(`id("cache_replacement_policy"),
                                  _("Cache Replacement Policy"),
                                  [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")]),
                        `HSpacing(3),
                        `ComboBox(`id("memory_replacement_policy"),
                                  _("Memory Replacement Policy"),
                                  [`item("lru"), `item("heap GDSF"), `item("heap LFUDA"), `item("heap LRU")])
                    )),
                    `VSpacing(),
                    `VSquash(`HBox(
                        `TextEntry(`id("cache_dir"), _("Cache Directory"), ""),
                        `Bottom(`PushButton(`id(`cache_dir), "Advanced Setting"))
                    ))
                )
            ))
        );

    Wizard::SetContentsButtons("Squid - Cache Setting 2", dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    UI::ChangeWidget(`id("cache_mem_units"), `Items, [`item("B"),`item("KB",true), `item("MB")]);

    while (true){
        ret = UI::UserInput();

        y2debug("Cache2Dialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }else if (ret == `cache_dir){
            CacheDirAdvancedSettingDialog();
        }
    }

    return ret;
}


any AccessControlDialog(){
    any ret = nil;
    term dialog_contents =
        `VBox(
            `Left(`Label(_("ACL Groups"))),
            `Table(`id("acl"), `header(_("Name"), _("Type"), _("Description"))),
            `HBox(
                `PushButton(`id(`add_acl), Label::AddButton()),
                `PushButton(`id(`del_acl), Label::DeleteButton()),
                `PushButton(`id(`modify_acl), Label::EditButton()),
                `HStretch()
            ),

            `VSpacing(),

            `Left(`Label(_("Access Control"))),
            `HBox(
                `Table(`id("http_access"), `header(_("Allow/Deny"), _("ACL Groups"))),
                `HSquash(`VBox(
                    `HWeight(1, `PushButton(`id(`up_http_access), Label::UpButton())),
                    `HWeight(1, `PushButton(`id(`down_http_access), Label::DownButton()))
                ))
            ),
            `HBox(
                `PushButton(`id(`add_http_access), Label::AddButton()),
                `PushButton(`id(`del_http_access), Label::DeleteButton()),
                `PushButton(`id(`modify_http_access), Label::EditButton()),
                `HStretch()
            )
        );

    Wizard::SetContentsButtons(_("Squid - Access Control Setting"), dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    while (true){
        ret = UI::UserInput();

        y2debug("BaseDialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }
    }

    return ret;
}



any LoggingAndTimeoutsDialog()
{
    any ret = nil;
    term dialog_contents =
        `Top(`VBox(
            `Left(`Frame(_("Logging"),
                `VBox(
                    `TextEntry(`id("access_log"), _("Access Log") , ""),
                    `TextEntry(`id("cache_log"), _("Cache Log"), ""),
                    `TextEntry(`id("cache_store_log"), _("Cache Store Log"), ""),
                    `TextEntry(`id("cache_swap_log"), _("Cache Swap Log"), ""),
                    `Left(`CheckBox(`id("emulate_httpd_log"), _("Emulate Httpd Log?")))
                )
            )),

            `VSpacing(),

            `Left(`Frame(_("Timeouts"),
                `VBox(
                    `HBox(
                       `HSquash(`IntField(`id("connect_timeout"), _("Connection timeout"), 1, 99999, 10)),
                       timeUnitWidget("connection_timeout_units")
                    ),
                    `HBox(
                       `HSquash(`IntField(`id("client_lifetime"), _("Client Lifetime"), 1, 99999, 10)),
                       timeUnitWidget("clien_lifetime_units")
                    )
                )
            ))
        ));

    Wizard::SetContentsButtons("Squid - Logging + Timeouts Setting", dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    while (true){
        ret = UI::UserInput();

        y2debug("BaseDialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }
    }

    return ret;
}


any MiscellaneousDialog()
{
    any ret = nil;
    term dialog_contents =
        `Top(`VBox(
                `Left(`ComboBox(`id("error_language"),
                                 _("Language of error messages"),
                                 [])),
                 `VSpacing(),
                 `Left(`TextEntry(`id("cache_mgr"), _("Administrator's e-mail"), "")),
                 `VSpacing(),
                 `Left(`CheckBox(`id("ftp_pasive_mode"), _("Use Ftp Pasive Mode")))
        ));

    Wizard::SetContentsButtons("Squid - Miscellaneous Setting", dialog_contents, "help",
        Label::BackButton(), Label::NextButton());

    while (true){
        ret = UI::UserInput();

        y2debug("BaseDialog(): ret == %1",ret);

        if (ret == `next || ret == `back) break;
        else if (ret == `abort || ret == `cancel){
            //if (Popup::ReallyAbort(true)) break;
            break;
            continue;
        }
    }

    return ret;
}
/* EOF */
}
/* vim: set sw=4 ts=4 et ft=ycp : */
